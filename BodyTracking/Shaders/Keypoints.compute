#pragma kernel PostprocessKeypoints

#include "Common.hlsl"

// Input
Texture2D<float> _Heatmaps;
Texture2D<float> _Offsets;
uint2 _InputSize;
uint _Stride;

// Output
RWStructuredBuffer<float4> _Keypoints;

float SampleHeatmap(uint x, uint y, uint index)
{
    return _Heatmaps[uint2(x * BODYPIX_KEYPOINT_COUNT + index, y)];
}

[numthreads(BODYPIX_KEYPOINT_COUNT, 1, 1)]
void PostprocessKeypoints(uint id : SV_DispatchThreadID)
{
    uint2 max_pos = 0;
    float max_score = 0;

    for (uint v = 0; v < _InputSize.y; v++)
    {
        for (uint u = 0; u < _InputSize.x; u++)
        {
            uint2 pos = uint2(u, v);
            float score = SampleHeatmap(pos.x, pos.y, id);
            if (score > max_score)
            {
                max_pos = pos;
                max_score = score;
            }
        }
    }

    uint2 base = max_pos * uint2(BODYPIX_KEYPOINT_COUNT * 2, 1);
    uint2 ix = base + uint2(id + BODYPIX_KEYPOINT_COUNT, 0);
    uint2 iy = base + uint2(id, 0);

    float2 offs = float2(_Offsets[ix], -_Offsets[iy]);
    float2 pos = (max_pos + offs / _Stride + 0.5) / _InputSize;

    _Keypoints[id] = float4(pos, BodyPix_Sigmoid(max_score), 0);
}
