#pragma kernel Preprocess

#include "Common.hlsl"

// Input
sampler2D Input;
uint2 InputSize;
float4 ColorCoeffs;
bool InputIsLinear;

// Output
RWStructuredBuffer<float> Output;

[numthreads(8, 8, 1)]
void Preprocess(uint2 id : SV_DispatchThreadID)
{
    if (!all(id < InputSize)) return;

    // UV (vertically flipped)
    float2 uv = float2(0.5 + id.x, InputSize.y - 0.5 - id.y) / InputSize;

    // UV gradients
    float2 duv_dx = float2(1.0 / InputSize.x, 0);
    float2 duv_dy = float2(0, -1.0 / InputSize.y);

    // Texture sample
    float3 rgb = tex2Dgrad(Input, uv, duv_dx, duv_dy).rgb;
    if (InputIsLinear) rgb = BodyPix_LinearToSRGB(rgb);
    rgb = rgb * ColorCoeffs.w + ColorCoeffs.xyz;

    // Tensor element output
    uint offs = (id.y * InputSize.x + id.x) * 3;
    Output[offs + 0] = rgb.r;
    Output[offs + 1] = rgb.g;
    Output[offs + 2] = rgb.b;
}
